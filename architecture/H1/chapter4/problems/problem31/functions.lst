Machine-level Assembler Version 6.1    Sat Jan  3 21:57:06 2009

  LOC    OBJ   SOURCE
hex*dec

               ;---------------------------------------------------------------
               ; Version	: 1
               ; Created	: 3-december-2009
               ; Author	: Juan Carlos Yescas
               ; Description	: Write a program that replaces the call and ret i
               ;		  with sequences of instructions exluding call and ret that
               ;		  have the same effect.
               ;
               ;		  To simulate the call and ret instructions we have to store
               ; 		  the return address in the stack, and then in the function
               ;		  we get that instruction and modfify the next instruction.
               ;	
               ;---------------------------------------------------------------
               
0  *0    8004  	ldc	siguiente	; load the address of siguiente
1  *1    2028  	add	jump		; add the value of jump to built a jump instruction 9
2  *2    F300  	push			; push the value of the return in the stack
3  *3    9009  	ja	function1	; jump to function1
               siguiente:		; next instruction after the function.
4  *4    800A  	ldc	'\n'		; load the value of '\n'
5  *5    FFFB  	aout			; ASCII output
6  *6    8024  	ldc	msg		; load the address of msg
7  *7    FFF7  	sout			; string output
               
8  *8    FFFF  	halt			; end of the program
               
               ;-----------------------------------------
               ; function1()
               ;
               ;-----------------------------------------
               
               function1:
9  *9    800E  	ldc	msg1		; load the address of msg1
A  *10   FFF7  	sout			; string output
B  *11   F400   	pop			; pop the return address
C  *12   100D  	st	return		; store the return address in the return variable
D  *13   0000  return: dw	0		; the value of return is replaced by the return ad
               				; is in the stack
               	
E  *14   0045  msg1:	dw	"Executing function 1";
F  *15   0078
10 *16   0065
11 *17   0063
12 *18   0075
13 *19   0074
14 *20   0069
15 *21   006E
16 *22   0067
17 *23   0020
18 *24   0066
19 *25   0075
1A *26   006E
1B *27   0063
1C *28   0074
1D *29   0069
1E *30   006F
1F *31   006E
20 *32   0020
21 *33   0031
22 *34   0000
               
               ;-----------------
               ; VARIABLES
               ;-----------------
23 *35   0001  @1:	dw	1
24 *36   0046  msg:	dw	"Fin"
25 *37   0069
26 *38   006E
27 *39   0000
28 *40   9000  jump:	dw	9000h	; The opcode for the jump instruction(ja) is 9.
               
29 *41   ========= end of functions.mas ==========================


         Symbol/Cross-Reference Table

Symbol                   Address     References
                          (hex)       (hex)

 siguiente                 4           0  
 function1                 9           3  
 return                    D           C  
 msg1                      E           9  
 @1                        23         
 msg                       24          6  
 jump                      28          1  

Input file   = functions.mas
Output file  = functions.mac
List file    = functions.lst 
Number base  = decimal
Label status = case sensitive
