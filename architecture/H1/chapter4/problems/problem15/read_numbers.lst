Machine-level Assembler Version 6.1    Fri Dec 26 23:40:52 2008

  LOC    OBJ   SOURCE
hex*dec

               ;----------------------------------------------------------
               ; Version	: 1.0
               ; Created	: 26-december-2008
               ; Author	: Juan Carlos Yescas
               ; Description	:
               ;
               ;	Program that reads in 10 decimal numbers and then
               ; 	displays then in ascending order. The bubble sort is
               ;	used to sort the elements.
               ;----------------------------------------------------------
               
               main:
0  *0    805E  	ldc     msg		; load the address of msg
1  *1    FFF7  	sout  			; String output
2  *2    E05B  	call    printLine	; call printLine
               	
               capture:
3  *3    8070  	ldc     numbers		; load the address of numbers(array)
4  *4    207E  	add     index		; add index to the address of numbers
5  *5    107A  	st  	address		; store the curren address
6  *6    FFFC  	din			; decimal input
7  *7    F300  	push			; push the value in the stack
8  *8    007A  	ld	address		; load address
9  *9    F200  	sti			; store in the address that points "address" the content 
A  *10   007E  	ld	index		; load index
B  *11   207C  	add	@1		; increment index
C  *12   107E  	st      index		; store the value of index
D  *13   307D  	sub	@10		; subtract 10 to index to verify if we finish the capt
E  *14   D003  	jnz     capture		; if it's no ZERO jump to capture
               	
F  *15   8081  	ldc	msg_unsorted	; load the address of msg_unsorted
10 *16   FFF7  	sout			; string out
11 *17   E05B  	call 	printLine	; call printLine
12 *18   E04E  	call 	printNumbers	; call printNumbers
13 *19   8092  	ldc	msg_sorted	; load the address of msg_sorted
14 *20   FFF7  	sout			; string output
15 *21   E05B  	call	printLine	; call printLine
16 *22   E019  	call	sort		; call sort
17 *23   E04E  	call	printNumbers	; call printNumbers
               
18 *24   FFFF  	halt			; end of the program
               
               ;----------------------------------------------------------
               ; sort()
               ;
               ; Function that is in charge to sort all the numbers in the
               ; array called numbers.
               ;
               ; The algorith that is used is the bubble sort.
               ;----------------------------------------------------------
               sort:
19 *25   8000  	ldc     0		; load zero to initializate i
1A *26   104C  	st	i		; initialize i to zero
               for_ex: 			; OUTER FOR
1B *27   004C  	ld	i		; load i
1C *28   307F  	sub	@9		; subtract 9 to verify if we end the iteration
1D *29   C046  	jz	end_sort	; if ZERO, jump end_sort
               
1E *30   8000  	ldc	0		; load zero to initializate j
1F *31   104D  	st	j		; initialize j to zero
               for_in:				; INNER FOR
20 *32   004D  	ld	j		; load j
21 *33   307F  	sub	@9		; subtract 9 to j to verify if the cycle is ended
22 *34   C042  	jz	incr_i		; if ZERO, jump to incr_i
               	
23 *35   8070  	ldc	numbers		; load the address of numbers
24 *36   204D  	add	j		; add j to the address of numers
25 *37   104A  	st	x_add		; store the address of numbers
26 *38   207C  	add	@1		; add 1 to the address of numbers
27 *39   104B  	st	y_add		; store the address of numbers + 1
               
               	; load the value that is in the address y_add to y
28 *40   004B  	ld	y_add		; load the value of y_add, that is an address
29 *41   F100  	ldi			; load the value that is in the address
2A *42   1049  	st	y		; store the value in y
               	
               	; load the value that is in the address x_add to x
2B *43   004A  	ld	x_add		; load the value of x_add, that is an address
2C *44   F100  	ldi			; load the value that is in the address
2D *45   1048  	st	x		; store the value in x
               		
2E *46   3049  	sub	y		; subtract x-y
2F *47   A035  	jzop	interchange	; if it's zero or positive, jump to interchang
30 *48   9031  	ja	incr_j		; jump to incr_j
               	
               incr_j:
               	; increment j		
31 *49   007C  	ld	@1		; load 1
32 *50   204D  	add	j		; add 1 to j
33 *51   104D  	st	j		; store the value of j
34 *52   9020  	ja	for_in		; jump to for_in
               
               interchange:
35 *53   004A  	ld	x_add		; load the address that is in x_add
36 *54   F100  	ldi			; load the content that is in the address
37 *55   1047  	st	tmp		; store the address in tmp
38 *56   004B  	ld	y_add		; load the addres that is in y_add
39 *57   F100  	ldi			; load the content that is in the address
3A *58   F300  	push			; push te value in the stack
3B *59   004A  	ld	x_add		; load the address that is in  x_add
3C *60   F200  	sti			; store the value that is in the stack in the address tha
3D *61   0047  	ld	tmp		; load the value of tmp
3E *62   F300  	push			; push the value in the stack
3F *63   004B  	ld	y_add		; load the address that is in y_add
40 *64   F200  	sti			; store the value that is in the stack in the address tha
41 *65   9031  	ja	incr_j		; jump to incr_j
               
               incr_i:
42 *66   007C  	ld	@1		; load 1
43 *67   204C  	add	i		; add 1 to i
44 *68   104C  	st	i		; store the new value of i
45 *69   901B  	ja	for_ex		; jump to for_ex
               	
               end_sort:	
46 *70   F000  	ret			; return to the caller
               
47 *71   0000  tmp:	dw 	0
48 *72   0000  x:	dw	0
49 *73   0000  y: 	dw	0
4A *74   0000  x_add:  dw	0
4B *75   0000  y_add:	dw	0
4C *76   0000  i:	dw  	0
4D *77   0000  j:	dw  	0
               
               ;----------------------------------------------------------
               ; printNumbers()
               ;
               ; Function that prints the 10 numbers that are in the array
               ; numbers.
               ;---------------------------------------------------------
               
               printNumbers:
4E *78   8000  	ldc	0	; load zero to initialize index
4F *79   107E  	st	index	; store zero in index
               	
               printN:	
50 *80   8070  	ldc     numbers	; load the address of numbers
51 *81   207E  	add	index	; add index to the address
52 *82   F100  	ldi		; load the value that is contented in the address
53 *83   FFFD  	dout		; print the value
54 *84   E05B  	call	printLine ; call printLine
55 *85   007E  	ld	index	; load index
56 *86   207C  	add	@1	; add 1 to index
57 *87   107E  	st	index	; store index
58 *88   307D  	sub	@10	; substract 10 to index to figure out if we finish to p
59 *89   D050  	jnz	printN	; if the result is no zero, jump to printN
5A *90   F000  	ret		; return to the caller
               
               ;-------------------------------------------------------------
               ; printLine()
               ;
               ; Print a line feed
               ;-------------------------------------------------------------
               printLine:
5B *91   800A  	ldc  '\n'	; load the character '\n'
5C *92   FFFB  	aout		; ASCII output
5D *93   F000  	ret		; return to the caller
               
               
               ;------------------------------------
               ; VARIABLES
               ;------------------------------------
5E *94   0057  msg:	 dw   "Write ten numbers"
5F *95   0072
60 *96   0069
61 *97   0074
62 *98   0065
63 *99   0020
64 *100  0074
65 *101  0065
66 *102  006E
67 *103  0020
68 *104  006E
69 *105  0075
6A *106  006D
6B *107  0062
6C *108  0065
6D *109  0072
6E *110  0073
6F *111  0000
70 *112  0000  numbers: dw   10 dup 0
7A *122  0000  address: dw   0
7B *123  000A  counter: dw   10
7C *124  0001  @1:	 dw   1
7D *125  000A  @10:	 dw   10
7E *126  0000  index:   dw   0
7F *127  0009  @9:	 dw   9
80 *128  0008  @8:	 dw   8
81 *129  0055  msg_unsorted:	dw	"Unsorted numbers"
82 *130  006E
83 *131  0073
84 *132  006F
85 *133  0072
86 *134  0074
87 *135  0065
88 *136  0064
89 *137  0020
8A *138  006E
8B *139  0075
8C *140  006D
8D *141  0062
8E *142  0065
8F *143  0072
90 *144  0073
91 *145  0000
92 *146  0053  msg_sorted:	dw	"Sorted numbers"
93 *147  006F
94 *148  0072
95 *149  0074
96 *150  0065
97 *151  0064
98 *152  0020
99 *153  006E
9A *154  0075
9B *155  006D
9C *156  0062
9D *157  0065
9E *158  0072
9F *159  0073
A0 *160  0000
A1 *161  ========= end of read_numbers.mas =======================


         Symbol/Cross-Reference Table

Symbol                   Address     References
                          (hex)       (hex)

 main                      0          
 capture                   3           E  
 sort                      19          16 
 for_ex                    1B          45 
 for_in                    20          34 
 incr_j                    31          30  41 
 interchange               35          2F 
 incr_i                    42          22 
 end_sort                  46          1D 
 tmp                       47          37  3D 
 x                         48          2D 
 y                         49          2A  2E 
 x_add                     4A          25  2B  35  3B 
 y_add                     4B          27  28  38  3F 
 i                         4C          1A  1B  43  44 
 j                         4D          1F  20  24  32  33 
 printNumbers              4E          12  17 
 printN                    50          59 
 printLine                 5B          2   11  15  54 
 msg                       5E          0  
 numbers                   70          3   23  50 
 address                   7A          5   8  
 counter                   7B         
 @1                        7C          B   26  31  42  56 
 @10                       7D          D   58 
 index                     7E          4   A   C   4F  51 
                                       55  57 
 @9                        7F          1C  21 
 @8                        80         
 msg_unsorted              81          F  
 msg_sorted                92          13 

Input file   = read_numbers.mas
Output file  = read_numbers.mac
List file    = read_numbers.lst 
Number base  = decimal
Label status = case sensitive
