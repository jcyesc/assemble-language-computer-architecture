;--------------------------------------------------------------------------------------
; Version 	: 1.0
; Created	: 4-December-2009
; Author	: Juan Carlos Yescas
; Description	: Program that consists of four modules: main,
;		  input, mult and output. main should call input, mult
;		  and output, and then halt. input should prompt for and
;		  read in two positive decimal numers. mult should multiply
;		  the two decimal numbers read in by input by means of a loop that
;		  repeatedly adds. output should output the product computed by
;		  mult. It's asumed that the product will fit into 16 bits.
;		  The program must HANDLE both POSITIVE and NEGATIVE numbers.
;-------------------------------------------------------------------------------------

main:
	call input		; call to input
	call define_sign	; call to define_sign
	call mult		; call to mult
	call output		; callt to output

	halt			; end of the program

;--------------------------------------------------------------------------
; define_sign()
; 
;	Function that defines the sign of the result
;		
;		+ * + = +
;		+ * - or - * + = -
;		- * - = +
;	
;	And also makes the numbers positive
;--------------------------------------------------------------------------

define_sign:
	ld	number1		; load the value of number1
	jn	neg_n1		; if NEGATIVE, jump to neg_n1
	ja   	num2		; Jump always to num2

; IT  MAKES THE NUMBER1 POSITIVE
neg_n1:	ldc	1		; load 1 to establish the sign to NEGATIVE
	st	sign1		; store the 1 in the variable sign1
	ld	number1		; Now we make the number1 positive
	add	number1		; add number1 to number1
	st	tmp		; store the result in tmp
	ld	number1		; load number1
	sub	tmp		; subtract tmp ( -number - (-number1 + -number1) = number)
	st	number1		; store the value of the POSITIVE number in number1
	
num2:	ld	number2		; load the value of number2
	jn	neg_n2		; if NEGATIVE jump to neg_n2
	ja	def_sign	; jump always to def_sign

; IT MAKES THE NUMBER2 POSITIVE
neg_n2:	ldc	1		; load the value of 1
	st	sign2		; establish the value of sign2 to 1 (NEGATIVE)
	ld	number2		; load the value of number2
	add	number2		; add number2 to number2
	st	tmp		; store the vaue in tmp
	ld	number2		; load number2
	sub	tmp		; subtract tmp ( -number2 - ( -number2 + -number2) = number2)
	st	number2		; store the POSITIVE number in number2

def_sign:
	ld	sign1		; load the value of sign1
	add	sign2		; load the value of sign2
	st	result_sign	; store the result in result_sign
	jz	end_ds		; The result of sign is POSITVE
	sub	@1		; subtract 1 to see if the sign is NEGATIVE
	jz	end_ds		; The result of sign is NEGATIVE
	; if we're here, that means the sign is POSITIVE ( NEGATIVE * NEGATIVE = POSITIVE)
	ldc	0		; load 0 to ac
	st	result_sign	; store the value of ac in result_sign
	
end_ds:	ret		; return to the caller

sign1:	dw	0	; 0 POSITIVE, 1 NEGATIVE
sign2:	dw	0	; 0 POSITIVE, 1 NEGATIVE
tmp:	dw	0	

;--------------------------------------------------------------------------
; input()
;
;	Input the values to number1 and number2.
;--------------------------------------------------------------------------
input:
	ldc	msg	; load the address of msg
	sout		; string output
	din		; decimal input
	st	number1 ; store the value of ac in number1
	ldc	msg	; load the address of msg
	sout		; string output
	din		; decimal input
	st	number2	; store the value of ac in number2
	ret		; return to the caller

;--------------------------------------------------------------------------
; mult()
;
;	Multiply number1 with number2 by adding number2 n times, depending 
; 	of the value of number1.
;--------------------------------------------------------------------------

mult:	
for:	ld	result		; load the value of result
	add	number2		; add number2 to result
	st	result		; store the new value in result
	
	ld	number1		; load the value of number1
	sub	@1		; subtract 1 to number1
	st	number1		; store the new value in number1
	jn	end_mult	; if the subtract is negative ( 0 - 1) jump to end_mult
	jnz	for		; if NOT ZERO, jump to for

end_mult:
	ret			; return to the caller

;--------------------------------------------------------------------------
; output()
;
;	Show the result of the multiplication
;--------------------------------------------------------------------------

output:
	ldc	'\n'		; load the value of '\n'
	aout			; string output
	ldc	msg_result	; load the address of msg_result
	sout			; string output
	ld	result_sign	; load the value of result_sign
	jz	positive
	ja	negative

positive:
	ldc	'+'		; load the value of '+'
	aout			; ASCII output
	ja	print_r		; jump always to print_r

negative:
	ldc	'-'		; load the value of '-'
	aout			; ASCII output
	ja	print_r		; jump always to print_r

print_r:ld	result		; load the value of result
	dout			; decimal output
	ret			; return to the caller

;-----------------------
; VARIABLES
;-----------------------

number1:	dw	0
number2:	dw	0
result:		dw	0
msg:		dw	"Write a number "
counter:	dw	0
msg_result:	dw	"The result is "
@1:		dw	1
@2:		dw	2
result_sign:	dw	0
