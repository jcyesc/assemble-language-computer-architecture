cat file sup.cat
0  *0    005A  loc0:      dw   'Z'       ; to test for null pointer assignment
1  *1    8000  start_up:  ldc  0  
2  *2    F700             swap
3  *3    003E  getarg:    ld   clptr     ; get next char in command line
4  *4    F100             ldi 
5  *5    C02A             jz   alldone   ; if null char, all done
6  *6    0041             ld   argc      ; get current count
7  *7    303D             sub  @20
8  *8    D00C             jnz  * + 4    
9  *9    8058             ldc  errmsg1   ; display error message
A  *10   FFF7             sout
B  *11   903A             ja   done      ; terminate execution if count at 20 
C  *12   003E             ld   clptr     ; get address of next arg
D  *13   F300             push           
E  *14   003F             ld   vectorptr
F  *15   F200             sti            ; put address into vector
10 *16   003E             ld   clptr
11 *17   F100  getchar:   ldi            ; get next char in command line
12 *18   C019             jz   endarg    ; ja   if null char
13 *19   3040             sub  blank  
14 *20   C019             jz   endarg    ; ja   if space
15 *21   003E             ld   clptr     ; move command line ptr to next char
16 *22   203C             add  @1
17 *23   103E             st   clptr
18 *24   9011             ja   getchar
19 *25   8000  endarg:    ldc  0        
1A *26   F300             push
1B *27   003E             ld   clptr     ; clptr points to where null char goes
1C *28   F200             sti 
1D *29   0041             ld   argc  
1E *30   203C             add  @1
1F *31   1041             st   argc
20 *32   003F             ld   vectorptr
21 *33   203C             add  @1  
22 *34   103F             st   vectorptr
23 *35   003E  nextarg:   ld   clptr 
24 *36   203C             add  @1
25 *37   103E             st   clptr
26 *38   F100             ldi 
27 *39   3040             sub  blank
28 *40   C023             jz   nextarg   ; move over blanks
29 *41   9003             ja   getarg    ; now process next arg
2A *42   8042  alldone:   ldc  vector    ; push address of vector
2B *43   F300             push
2C *44   0041             ld   argc      ; push number of args
2D *45   F300             push
2E *46   E000             call main
2F *47   F602             dloc 2         ; deallocate parameters
30 *48   1057             st   retcode   ; save return code from main
31 *49   0000  testloc0:  ld    loc0    
32 *50   3056             sub   z
33 *51   C03A             jz    done     ; if still there, ja   to done
34 *52   0031             ld   testloc0  ; start-up code at loc 0?
35 *53   C038             jz   atloc0    ; if yes, display null ptr message
36 *54   807A             ldc  errmsg2   ; if not, display other message
37 *55   9039             ja   outmsg
38 *56   8094  atloc0:    ldc  errmsg3
39 *57   FFF7  outmsg:    sout
3A *58   0057  done:      ld   retcode   ; restore ret code from main
3B *59   FFFF             halt           ; return to op sys (sim)
3C *60   0001  @1:        dw   1
3D *61   0014  @20:       dw   20
3E *62   0F3C  clptr:     dw   3900      ; address of command line
3F *63   0042  vectorptr: dw   vector    ; array of char ptrs to the arguments
40 *64   0020  blank:     dw   ' '
41 *65   0000  argc:      dw   0         ; count of the number of arguments
42 *66   0000  vector:    dw   20 dup 0  ; space for 20 arg pointers
56 *86   005A  z:         dw   'Z'
57 *87   0000  retcode:   dw   0
58 *88   000A  errmsg1:   dw   "\nToo many command line arguments\n"
59 *89   0054
5A *90   006F
5B *91   006F
5C *92   0020
5D *93   006D
5E *94   0061
5F *95   006E
60 *96   0079
61 *97   0020
62 *98   0063
63 *99   006F
64 *100  006D
65 *101  006D
66 *102  0061
67 *103  006E
68 *104  0064
69 *105  0020
6A *106  006C
6B *107  0069
6C *108  006E
6D *109  0065
6E *110  0020
6F *111  0061
70 *112  0072
71 *113  0067
72 *114  0075
73 *115  006D
74 *116  0065
75 *117  006E
76 *118  0074
77 *119  0073
78 *120  000A
79 *121  0000
7A *122  000A  errmsg2:   dw   "\nStart-up code corrupted\n"
7B *123  0053
7C *124  0074
7D *125  0061
7E *126  0072
7F *127  0074
80 *128  002D
81 *129  0075
82 *130  0070
83 *131  0020
84 *132  0063
85 *133  006F
86 *134  0064
87 *135  0065
88 *136  0020
89 *137  0063
8A *138  006F
8B *139  0072
8C *140  0072
8D *141  0075
8E *142  0070
8F *143  0074
90 *144  0065
91 *145  0064
92 *146  000A
93 *147  0000
94 *148  000A  errmsg3:   dw   "\nNull pointer assignment\n"
95 *149  004E
96 *150  0075
97 *151  006C
98 *152  006C
99 *153  0020
9A *154  0070
9B *155  006F
9C *156  0069
9D *157  006E
9E *158  0074
9F *159  0065
A0 *160  0072
A1 *161  0020
A2 *162  0061
A3 *163  0073
A4 *164  0073
A5 *165  0069
A6 *166  0067
A7 *167  006E
A8 *168  006D
A9 *169  0065
AA *170  006E
AB *171  0074
AC *172  000A
AD *173  0000
AE *174  ========= end of sup.mas ================================
AE *174  4001  @atoi$c:	ldr	1
AF *175  3088  		sub	@48
B0 *176  F000  		ret
B1 *177  8000  @mult$ii:	ldc	0	; int temp = 0;
B2 *178  F501  		aloc	1	; variable to store the result
B3 *179  5000  		str	0
B4 *180  4002  _for:		ldr	2	; verify if x is not zero
B5 *181  C00F  		jz	_end	; if zero jump to .en
B6 *182  4003  		ldr	3	; load y
B7 *183  6000  		addr	0	; sum temp to y (tmp += y;)
B8 *184  5000  		str	0
B9 *185  4002  		ldr	2	; x--;
BA *186  3085  		sub	@1
BB *187  5002  		str	2	
BC *188  9006  		ja	_for
BD *189  4000  _end:		ldr	0	; variable that stores the result
BE *190  F601  		dloc	1	; release the memory of temp
BF *191  F000  		ret
C0 *192  F501  @toInt$cp:	aloc	1	; int tmp = atoi(p[0]);
C1 *193  4002  		ldr	2
C2 *194  F100  		ldi		
C3 *195  F300  		push	
C4 *196  E000  		call	@atoi$c
C5 *197  F601  		dloc	1
C6 *198  5000  		str	0	
C7 *199  4002  		ldr	2	; p++
C8 *200  2085  		add	@1
C9 *201  5002  		str	2
CA *202  4002  _while:		ldr	2	; while(*p != null)
CB *203  F100  		ldi
CC *204  C031  		jz	_end2
CD *205  4000  		ldr	0	; tmp = mult(10, tmp);
CE *206  F300  		push
CF *207  800A  		ldc	10
D0 *208  F300  		push
D1 *209  E003  		call	@mult$ii
D2 *210  F602  		dloc	2		
D3 *211  5000  		str	0
D4 *212  4002  		ldr	2	; tmp += atoi(p[0]);	
D5 *213  F100  		ldi
D6 *214  F300  		push
D7 *215  E000  		call	@atoi$c
D8 *216  F601  		dloc	1
D9 *217  6000  		addr	0	
DA *218  5000  		str	0
DB *219  4002  		ldr	2	; p++;
DC *220  2085  		add	@1
DD *221  5002  		str	2
DE *222  901C  		ja	_while
DF *223  4000  _end2:		ldr	0	; return tmp
E0 *224  F601  		dloc	1
E1 *225  F000  		ret
               main:
E2 *226  4001  	ldr	1		; if(argc != 3)
E3 *227  3087  	sub	@3		;	cout << "Three parameters are required.\n";
E4 *228  D053  	jnz	_error_main
E5 *229  4002  	ldr	2		; n1 = toInt(argv[1]);
E6 *230  2085  	add	@1		
E7 *231  F100  	ldi
E8 *232  F300  	push
E9 *233  E012  	call	@toInt$cp
EA *234  F601  	dloc	1
EB *235  1089  	st	@n1
EC *236  FFFD  	dout			; cout << n1 << endl;
ED *237  800A  	ldc	'\n'
EE *238  FFFB  	aout
EF *239  4002  	ldr	2		; n2 = toInt(argv[2]);
F0 *240  2086  	add	@2
F1 *241  F100  	ldi
F2 *242  F300  	push
F3 *243  E012  	call	@toInt$cp
F4 *244  F601  	dloc	1
F5 *245  108A  	st	@n2
F6 *246  FFFD  	dout			; cout << n2 << endl;
F7 *247  800A  	ldc	'\n'
F8 *248  FFFB  	aout
F9 *249  8076  	ldc	@msg2		; cout << "The result is " << (n1 + n2) << endl;
FA *250  FFF7  	sout
FB *251  0089  	ld	@n1
FC *252  208A  	add	@n2
FD *253  FFFD  	dout
FE *254  800A  	ldc	'\n'
FF *255  FFFB  	aout	
100*256  9055  	ja	_end_main
               _error_main:
101*257  8056  	ldc	@msg1
102*258  FFF7  	sout	
               _end_main:
103*259  F000  	ret			; return to the caller
104*260  0054  @msg1:	dw	"Three parameters are required.\n"
105*261  0068
106*262  0072
107*263  0065
108*264  0065
109*265  0020
10A*266  0070
10B*267  0061
10C*268  0072
10D*269  0061
10E*270  006D
10F*271  0065
110*272  0074
111*273  0065
112*274  0072
113*275  0073
114*276  0020
115*277  0061
116*278  0072
117*279  0065
118*280  0020
119*281  0072
11A*282  0065
11B*283  0071
11C*284  0075
11D*285  0069
11E*286  0072
11F*287  0065
120*288  0064
121*289  002E
122*290  000A
123*291  0000
124*292  0054  @msg2:	dw	"The result is ";
125*293  0068
126*294  0065
127*295  0020
128*296  0072
129*297  0065
12A*298  0073
12B*299  0075
12C*300  006C
12D*301  0074
12E*302  0020
12F*303  0069
130*304  0073
131*305  0020
132*306  0000
133*307  0001  @1:	dw	1
134*308  0002  @2:	dw	2
135*309  0003  @3:	dw	3
136*310  0030  @48:	dw	48	; use to subtract ASCII - 48 to get the number
137*311  0000  @n1:	dw	0
138*312  0000  @n2:	dw	0
139*313  ========= end of program.mas ============================
