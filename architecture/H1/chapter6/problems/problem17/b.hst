Horizontal Microcode Assembler Version 6.1      Sat Feb 28 22:50:20 2009

  LOC    OBJECT    SOURCE
hex*dec

                   / Basic Instruction Set Horizontal Microcode 	b.has
                   
                   / The label indicates the opcode decoded up to that point.
                   / For example, control reaches the label L011 when opcode
                   / bits 011 have been decoded.
                   
                   /***********************************************************
                   /	Fetch instruction and increment pc register		  /
                   /***********************************************************
0  *0    304D2000  fetch:	mar = pc; pc = pc + 1;		/ increment pc
1  *1    00001000  	rd;				/ fetch mach inst
2  *2    49400000  	ir = mdr;			/ put mach inst in ir
                   /***********************************************************
                   / 	Decode opcode						  /
                   /***********************************************************
3  *3    52400207  	dc = ir; if(s) goto L1			/ test 1st bit
4  *4    5281820A  L0:	dc = left(dc); if (s) goto L01;		/ test 2n bit
5  *5    52818210  L00:	dc = left(dc); if (s) goto L001;	/ test 3rd bit
6  *6    0000060E  		goto L000;
7  *7    5281820C  L1:	dc = left(dc); if (s) goto L11;		/ test 2nd bit
8  *8    5281822C  L10:	dc = left(dc); if (s) goto L101;	/ test 3rd bit
9  *9    0000062A  		goto L100;
A  *10   52818226  L01:	dc = left(dc); if (s) goto L011;	/ test 3rd bit
B  *11   00000612  		goto L010;
C  *12   52818230  L11:	dc = left(dc); if (s) goto L111;	/ test 3rd bit
D  *13   0000062D  		goto L110;
E  *14   52818217  L000:   dc = left(dc); if(s) goto L0001:	/ test 4th bit
F  *15   00000614  		goto L0000;
10 *16   5281821C  L001:   dc = left(dc); if(s) goto L0011;	/ test 4th bit
11 *17   0000061A  		goto L0010;	
12 *18   52818223  L010:   dc = left(dc); if(s) goto L0101;	/ test 4th bit
13 *19   0000061F  		goto L0100;
                   
                   /***********************************************************
                   /	Microde for each instruction				 /
                   /***********************************************************
                   L0000:	/--------------------------- LD ---------------------
14 *20   00122000  	mar = ir;			/ get add from inst
15 *21   00001000  	rd;				/ read operand
16 *22   41400600  	ac = mdr; goto fetch;		/ load ac with operand
                   
                   L0001:  /--------------------------- ADD -------------------
17 *23   00122000  	mar = ir;			/ get add from inst 
18 *24   00001000  	rd;				/ read operand
19 *25   420B0600  	ac = ac + mdr; goto fetch;	/ add ac of the operand
                   
                   L0010:  /--------------------------- ST --------------------
1A *26   2A122000  	mar = ir; mdr = ac;		/ prepare for write
1B *27   00000E00  	wr; goto fetch;			/ write
                   
                   L0011:  /--------------------------- SUB -------------------
1C *28   00122000  	mar = ir;			/ get add from inst
1D *29   00001000  	rd;				/ read operand
1E *30   420B4600  	ac = ac - mdr; goto fetch;	/ subtract ac of the operand
                   
                   L0100:	/--------------------------- SHLL -------------------
1F *31   7A488400  	f = ir & zmask; if (z) goto fetch;	/ get z-field
20 *32   42018000  lloop:	ac = left(ac);				/ shift ac left
21 *33   7BC34400  	f = f - 1; if(z) goto fetch;		/ dec ac and test
22 *34   00000620  	goto lloop;				/ branch to lloop
                   
                   L0101:  /--------------------------- DIV -------------------
23 *35   00122000  	mar = ir;			/ get add from inst
24 *36   00001000  	rd;				/ read operand
25 *37   420AC600  	ac = ac * mdr; goto fetch;	/ divide ac of the operand
                   	/ How do I escape de / symbol to divede
                   
                   L011:	/--------------------------- SHRL --------------------
26 *38   7A488400  	f = ir & zmask; if (z) goto fetch;	/ get z-field
27 *39   4201C000  rloop:	ac = right(ac);				/ shift ac right
28 *40   7BC34400  	f = f - 1; if (z) goto fetch;		/ dec ac and test
29 *41   00000627  	goto rloop;				/ branch to rloop
                   
                   L100:  	/--------------------------- ADDC ------------------
2A *42   7A448000  	f = ir & xmask;			/ get const from x-field
2B *43   421F0600  	ac = ac + f; goto fetch;	/ add const to ac
                   
                   L101:   /--------------------------- FLIP ------------------
2C *44   42004600  	ac = ~ac; goto fetch;		/ bitwise compl ac
                   
                   L110:	/--------------------------- MULT --------------------
2D *45   00122000  	mar = ir;			/ get add from inst
2E *46   00001000  	rd;				/ read operand
2F *47   420AC600  	ac = ac * mdr; goto fetch;	/ mult ac by operand
                   
                   L111:	/--------------------------- JN ----------------------
30 *48   02000232  	0 = ac; if (s) goto dojn;	/ branch if ac neg
31 *49   00000600  	goto fetch;			/ branch
32 *50   32448600  dojn:	pc = ir & xmask; goto fetch;	/ put new add in pc
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
33 *51   ============= end of b.has ==============================

Input file   = b.has
Output file  = b.hor
List file    = b.hst 
Config file  = b.cfg 
Number base  = decimal
Label status = case sensitive
Shifter      = one-position
